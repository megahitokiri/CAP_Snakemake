#--------------------------------------------------------------------------------
# MAIN CONFIGURATION PARAMETERS (INTERNAL CONFIG FILE)
#Cancel all jobs if fail: squeue -u $USER -h | awk '{print $1}' | xargs scancel
#--------------------------------------------------------------------------------

CHRS = '01 02 03 04 05 06 07 08 09 X 11'.split()
PROJECT = "Kalea_Hap2"
REFERENCE = "MAIN_FASTAs/Kalea_Hap2.GAP.CHR_ID.reviewed.chr_assembled.fasta"
NANOPORE_FASTQ = "/DATA/home/jmlazaro/Projects/Annotations_Cannabis/CAP_Snakemake_Sundance/NANOPORE_DATA/RNA_DATA_NCBI/lemillion.Nanopore.fastq"
AED_FILTER = '1'.split()
NANOPORE_FILTER = '10'

#--------------------------------------------------------------------------------
# TargetRule FINAL_GFF3
#--------------------------------------------------------------------------------

rule FINAL_GFF3:
	input:
		expand("{Main_Reference}",Main_Reference=REFERENCE),
		expand("{Project}/Maker_Files/csa.trans.Protein.10072011.fasta",Project=PROJECT),
		expand("{Project}/Maker_Files/PK_Repeat_contigs_RE_filtered_min500bp.fa",Project=PROJECT),
		expand("{Project}/Ref/scaffold_{Chrs}.fasta",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TEanno.gff3",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TElib.fa",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/EDTA_Files/{Project}_chr{Chrs}.masked.fasta",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam",Project=PROJECT),
		expand("{Project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam.bai",Project=PROJECT),
		expand("{Project}/Sorted_Chromosomes/Nanopore.chr{Chrs}.fasta",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/Sorted_Chromosomes/Minor_Scaffolds.fasta",Project=PROJECT),
		expand("{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}_master_datastore_index.log",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}.all.gff",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/Maker_Files/Chr{Chrs}/MAKER_Filtered.scaffold_{Chrs}.all.AED_{AED_filter}.gff3",Project=PROJECT,Chrs = CHRS,AED_filter=AED_FILTER),
		expand("{Project}/Post_Maker_Files/MAKER_ORF_Filtered_{Project}.scaffold_{Chrs}.AED_{AED_filter}.gff3",Project=PROJECT,Chrs = CHRS,AED_filter=AED_FILTER),
		expand("{Project}/FINAL_ANNOTATION/FINAL_{Project}.AED_{AED_filter}.sorted.gff3",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/Summary_data/JML.{Project}.AED_{AED_filter}_GFF3_summary.txt",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/Summary_data/{Project}.AED_{AED_filter}_protein.fasta",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/Summary_data/{Project}.AED_{AED_filter}_busco/short_summary.specific.eudicots_odb10.{Project}.AED_{AED_filter}_busco.txt",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/INTERPRO/{Project}.AED_{AED_filter}_protein.interpro.fasta.tsv",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/FINAL_ANNOTATION/FINAL_{Project}.AED_{AED_filter}.sorted.interpro.gff3",Project=PROJECT,AED_filter=AED_FILTER),


	params:
		project=PROJECT,
	shell:
		"""
		echo Pipeline Finished correctly for {params.project}..... CONGRATS!!! > {params.project}.Pipeline_complete.txt
		mv *.err {params.project}/logs
		mv *.out {params.project}/logs
		date "+DATE: %D%nTIME: %T" >> {params.project}.Pipeline_complete.txt
		
		cp -v {params.project}/FINAL_ANNOTATION/FINAL_{params.project}_v1_2.sorted.flagged.gff3 {params.project}/{params.project}.Rieseberg.v1_2.gff3
		echo final annotation file located at: {params.project}/{params.project}.Rieseberg.v1_2.gff3 >> {params.project}.Pipeline_complete.txt
		echo Pipeline Finished correctly for {params.project}..... CONGRATS!!!
		"""	

#--------------------------------------------------------------------------------
# Init: Initializing files and folder
#--------------------------------------------------------------------------------
rule Init:
	input:
		reference={REFERENCE},
		maker_files="Maker_Files.zip",
		Assembly_spliter="Assembly_Chr_splitter.R",
	output:
		Main_fasta=expand("{Project}/Ref/{Project}_Main.fasta",Project=PROJECT),
		Protein_File=expand("{Project}/Maker_Files/csa.trans.Protein.10072011.fasta",Project=PROJECT),
		Repeats_File=expand("{Project}/Maker_Files/PK_Repeat_contigs_RE_filtered_min500bp.fa", Project=PROJECT),
	params:
		project=PROJECT,
	shell:
		"""
		echo $PWD

		mkdir -p {params.project}
		mkdir -p {params.project}/Ref


		snakemake --dag | dot -Tsvg > {params.project}/dag.svg

		unzip -o Maker_Files.zip -d {params.project}

		cp -v  {input.reference} {output.Main_fasta}

		#Index FASTA file
		samtools faidx {output.Main_fasta} 
		
		cd {params.project}
		
		"""


#--------------------------------------------------------------------------------
# Chr_splitting: Split the Main Assembly in Chromosomes for easy handling
#--------------------------------------------------------------------------------

rule Chr_splitting:
	input:
		rules.Init.output.Main_fasta,
	output:
		expand("{Project}/Ref/scaffold_{Chrs}.fasta",Project=PROJECT,Chrs=CHRS),
		
	params:
		project=PROJECT,
	shell:
		"""
		echo Assembly_Chr_splitter.R --args -f {input} 

		echo Assembly split into Chromosomes
		R --vanilla < Assembly_Chr_splitter.R --args -f {input} &&
		mv *scaffold*.fasta {params.project}/Ref/

		"""

#--------------------------------------------------------------------------------
# EDTA_individual: Look for TE elements on individual Fasta Chr
#--------------------------------------------------------------------------------
rule EDTA_individual:
	input:
		rules.Chr_splitting.output,
	output:
		gff3_file="{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TEanno.gff3",
		repeats_file="{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TElib.fa",
	params:
		project=PROJECT,
	shell:
		"""
		cp {params.project}/Ref/scaffold_{wildcards.Chrs}.fasta {params.project}/EDTA_Files
		cp -v Name_checker_pre.sh {params.project}/EDTA_Files
		cp -v Name_checker_post.sh {params.project}/EDTA_Files
		
		cd {params.project}/EDTA_Files
		
		echo "Name_cheker pre and post correct EDTA bigger than 15 characters name error on FASTA."
		bash Name_checker_pre.sh scaffold_{wildcards.Chrs}.fasta {params.project}
		
		set +u
		eval "$(conda shell.bash hook)"
		conda activate EDTA
		set -u
			echo starting EDTA process on: scaffold_{wildcards.Chrs}.fasta
			EDTA.pl --overwrite 0 --genome scaffold_{wildcards.Chrs}.fasta --sensitive 0 --anno 1 --evaluate 0 --threads 16 --force 1
		conda deactivate
		set +u
		
		bash Name_checker_post.sh scaffold_{wildcards.Chrs}.fasta {params.project} scaffold_{wildcards.Chrs}.fasta.mod.EDTA.TEanno.gff3
		"""

#--------------------------------------------------------------------------------
# Masked_FASTA: Create masked fasta for further analysis from EDTA results.
#--------------------------------------------------------------------------------
#####TURNING OF MASKING FOR EXPERIMENT
rule Masked_FASTA:
	input:
		EDTA_repeats_file=rules.EDTA_individual.output.gff3_file,
		reference=rules.Chr_splitting.output,
	output:
		masked_fasta_file="{Project}/EDTA_Files/{Project}_chr{Chrs}.masked.fasta",
	params:
		project=PROJECT,
	shell:
		"""
		cd {params.project}/EDTA_Files
		echo "Creating Masked Reference Genome for scaffold_{wildcards.Chrs}.masked.fasta"
		#bedtools maskfasta -fi scaffold_{wildcards.Chrs}.fasta -bed scaffold_{wildcards.Chrs}.fasta.mod.EDTA.TEanno.gff3 -fo {params.project}_chr{wildcards.Chrs}.masked.fasta
		#Turning out masking
		cat scaffold_{wildcards.Chrs}.fasta > {params.project}_chr{wildcards.Chrs}.masked.fasta
		"""

#--------------------------------------------------------------------------------
# MINIMAP2: Align the Nanopore raw data to CHR bams for further processing.
#--------------------------------------------------------------------------------

rule MINIMAP2:
	input:
		Nanopore_File=NANOPORE_FASTQ,
		reference=rules.Init.output,
	output:
		Bam_file="{Project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam",
		Bai_file="{Project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam.bai",
	params:
		project=PROJECT,
		nanopore_filter=NANOPORE_FILTER,
	log:
		"{Project}/logs/MINIMAP2.log"
	shell:
		"""
		echo "Minimap will proceed with the alignment."
		echo Minimap Indexing
		minimap2 -ax map-ont -t 12 -2 {input.reference} {input.Nanopore_File} > {params.project}/Minimap_Aligned/minimap2.sam 

		echo SAM to BAM convertion
		samtools view -S -b {params.project}/Minimap_Aligned/minimap2.sam > {params.project}/Minimap_Aligned/minimap2.bam
		echo  BAM sorting
		samtools sort {params.project}/Minimap_Aligned/minimap2.bam -o {params.project}/Minimap_Aligned/minimap2.sorted.bam
		echo BAM indexing.....
		samtools index  {params.project}/Minimap_Aligned/minimap2.sorted.bam

		echo "Applying MAPQ quality filter of: MAPQ {params.nanopore_filter}"
#		samtools view -bq 20 {params.project}/Minimap_Aligned/minimap2.sorted.bam > {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.bam	
		samtools view -bq {params.nanopore_filter} {params.project}/Minimap_Aligned/minimap2.sorted.bam > {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.bam

		echo "Removing duplicates from Bam File"
		samtools rmdup -s {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.bam  {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam

		echo "BAM indexing SORTED QUALITY FILTERED AND DEDUP....."
		samtools index  {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam
		samtools idxstats {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam > {log}

		echo "MINIMAP2 STEP HAS FINISHED CORRECTLY"

		"""	

#--------------------------------------------------------------------------------
# Nanopore_Raw_to_Chr: Split the raw Nanopore data into chromosomes for analysis
#--------------------------------------------------------------------------------

rule Nanopore_Raw_to_Chr:
	input:
		rules.MINIMAP2.output.Bam_file,
	output:
		"{Project}/Sorted_Chromosomes/Nanopore.chr{Chrs}.fasta",
	params:
		project=PROJECT,
	log:
		"{Project}/logs/Sorted_Chromosomes.{Chrs}.log",
	shell:
		"""
		echo Extracting chromosome: {wildcards.Chrs}
		samtools view -b {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam {params.project}_Chr{wildcards.Chrs} > {params.project}/Minimap_Aligned/chr{wildcards.Chrs}.bam
		samtools index {params.project}/Minimap_Aligned/chr{wildcards.Chrs}.bam
		
		echo Transforming Bam to Fasta
		samtools bam2fq {params.project}/Minimap_Aligned/chr{wildcards.Chrs}.bam | seqtk seq -A - > {params.project}/Sorted_Chromosomes/Nanopore.chr{wildcards.Chrs}.fasta 
		"""

#--------------------------------------------------------------------------------
# Minor_Scaffolds_Correction: Add all the fasta lines to Chr11
#--------------------------------------------------------------------------------

rule Minor_Scaffolds_correction:
	input:
		"{Project}/Sorted_Chromosomes/Nanopore.chr11.fasta",
	output:
		"{Project}/Sorted_Chromosomes/Minor_Scaffolds.fasta",
	params:
		project=PROJECT,
	log:
		"{Project}/logs/Minor_Scaffolds_correction.log",
	shell:
		"""
		
		samtools idxstats {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam
		Contig_Number=$( samtools idxstats {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam | wc -l )
		Contig_Number=$((Contig_Number - 1))
		echo NUMBER OF CONTIGS: $Contig_Number 2> {log}
		for ((i=1; i<=$Contig_Number; i++))
			do
			samtools view -b {params.project}/Minimap_Aligned/minimap2.sorted.MAPQ20.dedup.bam {params.project}_Contig$i > {params.project}/Minimap_Aligned/Contig$i.bam
			samtools index {params.project}/Minimap_Aligned/Contig$i.bam
			echo Adding to Chr11 Fasta
			samtools bam2fq {params.project}/Minimap_Aligned/Contig$i.bam | seqtk seq -A - >> {params.project}/Sorted_Chromosomes/Nanopore.chr11.fasta
			done
		cp {params.project}/Sorted_Chromosomes/Nanopore.chr11.fasta {params.project}/Sorted_Chromosomes/Minor_Scaffolds.fasta
		"""				

#--------------------------------------------------------------------------------
# MAKER3: Perform Maker Analysis, using 3 iterations.
#--------------------------------------------------------------------------------

rule MAKER3:
	input:
		EST_File=rules.Nanopore_Raw_to_Chr.output,
		reference=rules.Chr_splitting.output,
		Protein_File=rules.Init.output.Protein_File,
		Repeats_File=rules.EDTA_individual.output.repeats_file,
	output:
		"{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}_master_datastore_index.log",
	params:
		project=PROJECT,
	shell:
		"""
		BASEDIR=$PWD 
		cd {params.project}/Maker_Files
		
		echo Creating Maker Files Chr: {wildcards.Chrs}
		mkdir -p Chr{wildcards.Chrs}
		cd Chr{wildcards.Chrs}
		maker -CTL
		cd ..
		cp maker_opts.template Chr{wildcards.Chrs}/maker_opts.ctl
		echo "########################" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "#-----Custom Parameters (these are always required)" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo genome=$BASEDIR/{params.project}/Ref/scaffold_{wildcards.Chrs}.fasta >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "est=$BASEDIR/{input.EST_File}" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "protein=$BASEDIR/{input.Protein_File}" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "repeat_protein=$BASEDIR/{input.Repeats_File}" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "augustus_species=arabidopsis" >> Chr{wildcards.Chrs}/maker_opts.ctl
		
		cd Chr{wildcards.Chrs}
		
		maker -c 16
		"""

#--------------------------------------------------------------------------------
# POST_MAKER: Create the consensus of gff and correct map name
#--------------------------------------------------------------------------------

rule POST_MAKER:
	input:
		Maker_File=rules.MAKER3.output,
	output:
		"{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}.all.gff",
	params:
		project=PROJECT,
		AED_filter=AED_FILTER,
	shell:
		"""
		cd {params.project}/Maker_Files
		cp quality_filter.pl Chr{wildcards.Chrs}/scaffold_{wildcards.Chrs}.maker.output
		
		cd Chr{wildcards.Chrs}/scaffold_{wildcards.Chrs}.maker.output
		fasta_merge -d scaffold_{wildcards.Chrs}_master_datastore_index.log
		gff3_merge -d scaffold_{wildcards.Chrs}_master_datastore_index.log
		maker_map_ids --prefix {params.project}_Chr{wildcards.Chrs} --justify 8 scaffold_{wildcards.Chrs}.all.gff > map
		map_gff_ids map scaffold_{wildcards.Chrs}.all.gff
		#map_fasta_ids map scaffold_{wildcards.Chrs}.all.maker.proteins.fasta
		#map_fasta_ids map scaffold_{wildcards.Chrs}.all.maker.transcripts.fasta
		cd ../../..
		"""

#--------------------------------------------------------------------------------
# AED_FILTER: Perform Maker Analysis, using 3 differente AED filter values
#--------------------------------------------------------------------------------

rule AED_FILTER:
	input:
		Maker_File=rules.POST_MAKER.output,
	output:
		"{Project}/Maker_Files/Chr{Chrs}/MAKER_Filtered.scaffold_{Chrs}.all.AED_{AED_filter}.gff3",
	params:
		project=PROJECT,
		AED_filter=AED_FILTER,
	shell:
		"""
		cd {params.project}/Maker_Files
		cd Chr{wildcards.Chrs}/scaffold_{wildcards.Chrs}.maker.output
		#####AED filter#####
		
		perl quality_filter.pl -a {wildcards.AED_filter} scaffold_{wildcards.Chrs}.all.gff > scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff 
		cd ..
		sed -n 1p scaffold_{wildcards.Chrs}.maker.output/scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff  > MAKER_Filtered.scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff3
		awk '$2 == "maker"' scaffold_{wildcards.Chrs}.maker.output/scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff >> MAKER_Filtered.scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff3
		cd ../../.
		"""


#------------------------------------------------------------------------------------
# ORF_analysis: Uses EDTA maked fasta file and ORF analysis to determine viable genes
#------------------------------------------------------------------------------------

rule ORF_analysis:
	input:
		GFF3_File=rules.AED_FILTER.output,
		Ref_File=rules.Chr_splitting.output,
		Masked_FASTA_File=rules.Masked_FASTA.output,
	output:
		"{Project}/Post_Maker_Files/MAKER_ORF_Filtered_{Project}.scaffold_{Chrs}.AED_{AED_filter}.gff3",
	params:
		project=PROJECT,
		AED_filter=AED_FILTER,
	shell:
		"""
		BASEDIR=$PWD 
		cp -v Post_Maker_ORF_Analysis_Terminal.R {params.project}/Post_Maker_Files
		cd {params.project}/Post_Maker_Files 

		R --vanilla < Post_Maker_ORF_Analysis_Terminal.R --args -g $BASEDIR/{params.project}/Maker_Files/Chr{wildcards.Chrs}/MAKER_Filtered.scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff3 -a $BASEDIR/{params.project}/Ref/scaffold_{wildcards.Chrs}.fasta -m $BASEDIR/{params.project}/EDTA_Files/{params.project}_chr{wildcards.Chrs}.masked.fasta -o {params.project}.scaffold_{wildcards.Chrs}.AED_{wildcards.AED_filter}

		cd ../../.
		"""


#------------------------------------------------------------------------------------
# Chr_merge: Fuse all gff3 individual chromosomes into complete assembly again
#------------------------------------------------------------------------------------

rule Chr_merge:
	input:
		expand("{Project}/Post_Maker_Files/MAKER_ORF_Filtered_{Project}.scaffold_{Chrs}.AED_{AED_filter}.gff3",Project=PROJECT,Chrs = CHRS,AED_filter=AED_FILTER),
	output:
		"{Project}/FINAL_ANNOTATION/FINAL_{Project}.AED_{AED_filter}.sorted.gff3",
	params:
		project=PROJECT,
		Chrs=CHRS,
	shell:
		"""
		cat {params.project}/Post_Maker_Files/MAKER_ORF_Filtered_{params.project}.scaffold_01.AED_{wildcards.AED_filter}.gff3 > {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.gff3
		
		for i in 0{{2,3,4,5,6,7,8,9}} X 11
			do
			tail -n +4 {params.project}/Post_Maker_Files/MAKER_ORF_Filtered_{params.project}.scaffold_$i.AED_{wildcards.AED_filter}.gff3 >> {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.gff3
			done
		
		/DATA/home/jmlazaro/github/gff3sort/gff3sort.pl --chr_order original {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.gff3 > {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.sorted.gff3
		"""


#------------------------------------------------------------------------------------
# GFF3_statistics: Calculate Statistics for Original and filtered GFF3 files
#------------------------------------------------------------------------------------

rule GFF3_statistics:
	input:
		GFF3_file=rules.Chr_merge.output,
	output:
		New_GFF3_summary="{Project}/Summary_data/JML.{Project}.AED_{AED_filter}_GFF3_summary.txt",
	params:
		project=PROJECT,
	shell:
		"""
		BASEDIR=$PWD
		cp -v GFF3_Summary_Statistics.R {params.project}/Summary_data/
		cd {params.project}/Summary_data/
		
		echo Calculating Statistics on New processed file
		R --vanilla < GFF3_Summary_Statistics.R --args --gff $BASEDIR/{input.GFF3_file} -o JML.{params.project}.AED_{wildcards.AED_filter}
		
		cd ../..
		"""

#------------------------------------------------------------------------------------
# Summary_statistics: Get summary of the new gff3 file
#------------------------------------------------------------------------------------

rule Summary_statistics:
	input:
		GFF3_file=rules.Chr_merge.output,
	output:
		Protein_FASTA="{Project}/Summary_data/{Project}.AED_{AED_filter}_protein.fasta",
	params:
		project=PROJECT,
	shell:
		"""
		BASEDIR=$PWD
		cd {params.project}/Post_Maker_Files

			echo starting PROTEIN MERGE process on: GFF3_{wildcards.AED_filter}.fasta
			cat predicted_proteins*AED_{wildcards.AED_filter}.fasta > $BASEDIR/{params.project}/Summary_data/{params.project}.AED_{wildcards.AED_filter}_protein.fasta

		echo Protein File Generated correctly CORRECTLY ....
		cd ../..
		"""


#---------------------------------------------------------------------------------------
# BUSCO: Evaluate the Predicted_Protein results into BUSCO protein mode from Orignal GFF3
#---------------------------------------------------------------------------------------

rule BUSCO:
	input:
		Protein_fasta=rules.Summary_statistics.output.Protein_FASTA,
	output:
		Busco_results="{Project}/Summary_data/{Project}.AED_{AED_filter}_busco/short_summary.specific.eudicots_odb10.{Project}.AED_{AED_filter}_busco.txt",
	params:
		project=PROJECT,
	shell:
		"""
		BASEDIR=$PWD

		cd $BASEDIR/{params.project}/Summary_data/
		
		set +u
		eval "$(conda shell.bash hook)"
		conda activate BUSCO
		set -u

		echo starting BUSCO process on: Protein_file_{wildcards.AED_filter}.fasta

			busco -f -c 32 -m protein -i $BASEDIR/{params.project}/Summary_data/{params.project}.AED_{wildcards.AED_filter}_protein.fasta -o {params.project}.AED_{wildcards.AED_filter}_busco -l eudicots_odb10

		conda deactivate		
		set +u

		echo done BUSCO analysis
		"""		

#---------------------------------------------------------------------------------------
# INTERPRO: Add functional annotation to the GFF3
#---------------------------------------------------------------------------------------

rule INTERPRO:
	input:
		Protein_fasta=rules.Summary_statistics.output.Protein_FASTA,
		GFF3_file=rules.Chr_merge.output,
	output:
		INTERPRO_OUTPUT="{Project}/INTERPRO/{Project}.AED_{AED_filter}_protein.interpro.fasta.tsv",
		INTERPRO_GFF3="{Project}/FINAL_ANNOTATION/FINAL_{Project}.AED_{AED_filter}.sorted.interpro.gff3",
	params:
		project=PROJECT,
	shell:
		"""

		sed 's/*//g' {input.Protein_fasta} > {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta
		/DATA/home/jmlazaro/Software/interproscan-5.57-90.0/interproscan.sh --formats tsv --goterms --cpu 48 --input {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta --applications Pfam -o {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta.tsv
		
		cp -v {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta.tsv {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta.intermediate.tsv
		sed -i 's/ /_/g' {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta.intermediate.tsv 
		sed -i 's/,/./g' {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta.intermediate.tsv 
		sed -i 's/\t/,/g' {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta.intermediate.tsv

		R --vanilla < Interpro_merger.R --args -g {input.GFF3_file} -a {params.project}/INTERPRO/{params.project}.AED_{wildcards.AED_filter}_protein.interpro.fasta.intermediate.tsv -o {params.project}/INTERPRO/FINAL_{params.project}.AED_{wildcards.AED_filter}.sorted.interpro.gff3
		/DATA/home/jmlazaro/github/gff3sort/gff3sort.pl --chr_order original {params.project}/INTERPRO/FINAL_{params.project}.AED_{wildcards.AED_filter}.sorted.interpro.gff3 > {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.sorted.interpro.gff3
		"""
